version: "3.8"

services:

  traefik:
    image: traefik:v2.7
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    restart: always
    env_file:
      - .env

  frontend:
    image: quivr-frontend-prebuilt
    pull_policy: never
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_ENV=local
        - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        - NEXT_PUBLIC_CMS_URL=${NEXT_PUBLIC_CMS_URL}
        - NEXT_PUBLIC_FRONTEND_URL=${NEXT_PUBLIC_FRONTEND_URL}
    extra_hosts:
      - "host.docker.internal:host-gateway"    
    container_name: web
    depends_on:
      - backend-core
      - traefik
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    ports:
      - 3000:3000

  backend-core:
    image: backend-base
    pull_policy: never
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile.dev
      args:
        - DEV_MODE=true
    extra_hosts:
      - "host.docker.internal:host-gateway"    
    container_name: backend-core
    volumes:
      - ./backend/:/code/
    command:
      - "uvicorn"
      - "main:app"
      - "--reload"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "5050"
      - "--workers"
      - "2"
    restart: always

    ports:
      - 5050:5050
      - 5678:5678 # debug port
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-core.rule=Host(`${API_DOMAIN_NAME}`)"
      - "traefik.http.routers.backend-core.entrypoints=websecure"
      - "traefik.http.routers.backend-core.tls.certresolver=myresolver"
      - "traefik.http.services.backend-core.loadbalancer.server.port=5050"

  redis:
    image: redis:latest@sha256:a7cee7c8178ff9b5297cb109e6240f5072cdaaafd775ce6b586c3c704b06458e
    container_name: redis
    restart: always
    ports:
      - 6379:6379

  worker:
    pull_policy: never
    image: backend-base
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"    
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: worker
    command: celery -A celery_worker worker -l info
    restart: always
    depends_on:
      - redis

  beat:
    image: backend-base
    pull_policy: never
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: beat
    command: celery -A celery_worker beat -l info
    restart: always
    depends_on:
      - redis

  flower:
    image: backend-base
    pull_policy: never
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: flower
    command: celery -A celery_worker flower -l info --port=5555
    restart: always
    depends_on:
      - redis
      - worker
      - beat
    ports:
      - 5555:5555
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=Host(`flower.${API_DOMAIN_NAME}`)"
      - "traefik.http.routers.flower.entrypoints=websecure"
      - "traefik.http.routers.flower.tls.certresolver=myresolver"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
